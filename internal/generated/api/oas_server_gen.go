// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DeleteAccess implements deleteAccess operation.
	//
	// Удаление доступа к метрикам для другого пользователя.
	//
	// DELETE /api/v1/access/{uuid}
	DeleteAccess(ctx context.Context, params DeleteAccessParams) (DeleteAccessRes, error)
	// DeleteMetric implements deleteMetric operation.
	//
	// Удаление значения метрики.
	//
	// DELETE /api/v1/metric/{uuid}
	DeleteMetric(ctx context.Context, params DeleteMetricParams) (DeleteMetricRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Soft удаление пользователя.
	//
	// DELETE /api/v1/user
	DeleteUser(ctx context.Context) (DeleteUserRes, error)
	// GetAccessOwners implements getAccessOwners operation.
	//
	// Получение всех пользователей, к чьим метрикам есть
	// доступ.
	//
	// GET /api/v1/access/owners
	GetAccessOwners(ctx context.Context) (GetAccessOwnersRes, error)
	// GetAccessUsers implements getAccessUsers operation.
	//
	// Получение всех пользователей с доступом к своим
	// метрикам.
	//
	// GET /api/v1/access/users
	GetAccessUsers(ctx context.Context) (GetAccessUsersRes, error)
	// GetAvatar implements getAvatar operation.
	//
	// Получение аватара пользователя.
	//
	// GET /api/v1/avatar/{uuid}
	GetAvatar(ctx context.Context, params GetAvatarParams) (GetAvatarRes, error)
	// GetMe implements getMe operation.
	//
	// Получение информации о текущем пользователе.
	//
	// GET /api/v1/me
	GetMe(ctx context.Context) (GetMeRes, error)
	// GetMetric implements getMetric operation.
	//
	// Получение метрик по параметрам.
	//
	// GET /api/v1/metric
	GetMetric(ctx context.Context, params GetMetricParams) (GetMetricRes, error)
	// PostAccess implements postAccess operation.
	//
	// Шаринг доступа к метрикам другому пользователю по
	// логину или почте.
	//
	// POST /api/v1/access
	PostAccess(ctx context.Context, req *PostAccess) (PostAccessRes, error)
	// PostLogin implements postLogin operation.
	//
	// Вход в систему.
	//
	// POST /api/v1/login
	PostLogin(ctx context.Context, req *PostUser) (PostLoginRes, error)
	// PostMetric implements postMetric operation.
	//
	// Добавление нового значение метрики.
	//
	// POST /api/v1/metric
	PostMetric(ctx context.Context, req *PostMetric) (PostMetricRes, error)
	// PostUser implements postUser operation.
	//
	// Регистрация (создание) пользователя.
	//
	// POST /api/v1/user
	PostUser(ctx context.Context, req *PostUser) (PostUserRes, error)
	// PutAvatar implements putAvatar operation.
	//
	// Изменение аватара текущего пользователя.
	//
	// PUT /api/v1/avatar
	PutAvatar(ctx context.Context, req PutAvatarReq) (PutAvatarRes, error)
	// PutMetric implements putMetric operation.
	//
	// Редактирование значения метрики.
	//
	// PUT /api/v1/metric
	PutMetric(ctx context.Context, req *PutMetric) (PutMetricRes, error)
	// PutUser implements putUser operation.
	//
	// Редактирование пользователя.
	//
	// PUT /api/v1/user
	PutUser(ctx context.Context, req *PutUser) (PutUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
