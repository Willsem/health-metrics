// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// DeleteAccess implements deleteAccess operation.
//
// Удаление доступа к метрикам для другого пользователя.
//
// DELETE /api/v1/access/{uuid}
func (UnimplementedHandler) DeleteAccess(ctx context.Context, params DeleteAccessParams) (r DeleteAccessRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteMetric implements deleteMetric operation.
//
// Удаление значения метрики.
//
// DELETE /api/v1/metric/{uuid}
func (UnimplementedHandler) DeleteMetric(ctx context.Context, params DeleteMetricParams) (r DeleteMetricRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteUser implements deleteUser operation.
//
// Soft удаление пользователя.
//
// DELETE /api/v1/user
func (UnimplementedHandler) DeleteUser(ctx context.Context) (r DeleteUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAccessOwners implements getAccessOwners operation.
//
// Получение всех пользователей, к чьим метрикам есть
// доступ.
//
// GET /api/v1/access/owners
func (UnimplementedHandler) GetAccessOwners(ctx context.Context) (r GetAccessOwnersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAccessUsers implements getAccessUsers operation.
//
// Получение всех пользователей с доступом к своим
// метрикам.
//
// GET /api/v1/access/users
func (UnimplementedHandler) GetAccessUsers(ctx context.Context) (r GetAccessUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAvatar implements getAvatar operation.
//
// Получение аватара пользователя.
//
// GET /api/v1/avatar/{uuid}
func (UnimplementedHandler) GetAvatar(ctx context.Context, params GetAvatarParams) (r GetAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMe implements getMe operation.
//
// Получение информации о текущем пользователе.
//
// GET /api/v1/me
func (UnimplementedHandler) GetMe(ctx context.Context) (r GetMeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMetric implements getMetric operation.
//
// Получение метрик по параметрам.
//
// GET /api/v1/metric
func (UnimplementedHandler) GetMetric(ctx context.Context, params GetMetricParams) (r GetMetricRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostAccess implements postAccess operation.
//
// Шаринг доступа к метрикам другому пользователю по
// логину или почте.
//
// POST /api/v1/access
func (UnimplementedHandler) PostAccess(ctx context.Context, req *PostAccess) (r PostAccessRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostLogin implements postLogin operation.
//
// Вход в систему.
//
// POST /api/v1/login
func (UnimplementedHandler) PostLogin(ctx context.Context, req *PostUser) (r PostLoginRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostMetric implements postMetric operation.
//
// Добавление нового значение метрики.
//
// POST /api/v1/metric
func (UnimplementedHandler) PostMetric(ctx context.Context, req *PostMetric) (r PostMetricRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostUser implements postUser operation.
//
// Регистрация (создание) пользователя.
//
// POST /api/v1/user
func (UnimplementedHandler) PostUser(ctx context.Context, req *PostUser) (r PostUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PutAvatar implements putAvatar operation.
//
// Изменение аватара текущего пользователя.
//
// PUT /api/v1/avatar
func (UnimplementedHandler) PutAvatar(ctx context.Context, req PutAvatarReq) (r PutAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PutMetric implements putMetric operation.
//
// Редактирование значения метрики.
//
// PUT /api/v1/metric
func (UnimplementedHandler) PutMetric(ctx context.Context, req *PutMetric) (r PutMetricRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PutUser implements putUser operation.
//
// Редактирование пользователя.
//
// PUT /api/v1/user
func (UnimplementedHandler) PutUser(ctx context.Context, req *PutUser) (r PutUserRes, _ error) {
	return r, ht.ErrNotImplemented
}
