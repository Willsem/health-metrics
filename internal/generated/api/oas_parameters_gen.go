// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteAccessParams is parameters of deleteAccess operation.
type DeleteAccessParams struct {
	// UUID доступа.
	UUID uuid.UUID
}

func unpackDeleteAccessParams(packed middleware.Parameters) (params DeleteAccessParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteAccessParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteAccessParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteMetricParams is parameters of deleteMetric operation.
type DeleteMetricParams struct {
	// UUID метрики.
	UUID uuid.UUID
}

func unpackDeleteMetricParams(packed middleware.Parameters) (params DeleteMetricParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteMetricParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteMetricParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAvatarParams is parameters of getAvatar operation.
type GetAvatarParams struct {
	// UUID пользователя.
	UUID uuid.UUID
}

func unpackGetAvatarParams(packed middleware.Parameters) (params GetAvatarParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetAvatarParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAvatarParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMetricParams is parameters of getMetric operation.
type GetMetricParams struct {
	// UUID пользователя.
	UserUUID uuid.UUID
	// Тип запрашиваемой метрики.
	Type MetricType
	// Начальная дата, с которой запрашивать метрику.
	StartDate OptDate
	// Конечная дата, до которой запрашивать метрику.
	EndDate OptDate
}

func unpackGetMetricParams(packed middleware.Parameters) (params GetMetricParams) {
	{
		key := middleware.ParameterKey{
			Name: "userUUID",
			In:   "query",
		}
		params.UserUUID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		params.Type = packed[key].(MetricType)
	}
	{
		key := middleware.ParameterKey{
			Name: "startDate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDate = v.(OptDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "endDate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndDate = v.(OptDate)
		}
	}
	return params
}

func decodeGetMetricParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMetricParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: userUUID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userUUID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UserUUID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userUUID",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Type = MetricType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Type.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startDate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startDate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDate.SetTo(paramsDotStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startDate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: endDate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "endDate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndDate.SetTo(paramsDotEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "endDate",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
