// Code generated by ent, DO NOT EDIT.

package metric

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the metric type in the database.
	Label = "metric"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldMetricType holds the string denoting the metric_type field in the database.
	FieldMetricType = "metric_type"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the metric in the database.
	Table = "metrics"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "metrics"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_metrics"
)

// Columns holds all SQL columns for metric fields.
var Columns = []string{
	FieldID,
	FieldMetricType,
	FieldValue,
	FieldDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "metrics"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_metrics",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// MetricType defines the type for the "metric_type" enum field.
type MetricType string

// MetricType values.
const (
	MetricTypeCalories      MetricType = "calories"
	MetricTypeFats          MetricType = "fats"
	MetricTypeCarbs         MetricType = "carbs"
	MetricTypeProteins      MetricType = "proteins"
	MetricTypeVegetable     MetricType = "vegetable"
	MetricTypeSteps         MetricType = "steps"
	MetricTypeWeight        MetricType = "weight"
	MetricTypeNeck          MetricType = "neck"
	MetricTypeBreast        MetricType = "breast"
	MetricTypeLeftBiceps    MetricType = "left_biceps"
	MetricTypeRightBiceps   MetricType = "right_biceps"
	MetricTypeWaist         MetricType = "waist"
	MetricTypeButtocks      MetricType = "buttocks"
	MetricTypeLeftHip       MetricType = "left_hip"
	MetricTypeRightHip      MetricType = "right_hip"
	MetricTypeLeftCalf      MetricType = "left_calf"
	MetricTypeRightCalf     MetricType = "right_calf"
	MetricTypeFatPercentage MetricType = "fat_percentage"
)

func (mt MetricType) String() string {
	return string(mt)
}

// MetricTypeValidator is a validator for the "metric_type" field enum values. It is called by the builders before save.
func MetricTypeValidator(mt MetricType) error {
	switch mt {
	case MetricTypeCalories, MetricTypeFats, MetricTypeCarbs, MetricTypeProteins, MetricTypeVegetable, MetricTypeSteps, MetricTypeWeight, MetricTypeNeck, MetricTypeBreast, MetricTypeLeftBiceps, MetricTypeRightBiceps, MetricTypeWaist, MetricTypeButtocks, MetricTypeLeftHip, MetricTypeRightHip, MetricTypeLeftCalf, MetricTypeRightCalf, MetricTypeFatPercentage:
		return nil
	default:
		return fmt.Errorf("metric: invalid enum value for metric_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the Metric queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMetricType orders the results by the metric_type field.
func ByMetricType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetricType, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
