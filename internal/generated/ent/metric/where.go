// Code generated by ent, DO NOT EDIT.

package metric

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Willsem/health-metrics/internal/generated/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Metric {
	return predicate.Metric(sql.FieldLTE(FieldID, id))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldValue, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldDate, v))
}

// MetricTypeEQ applies the EQ predicate on the "metric_type" field.
func MetricTypeEQ(v MetricType) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldMetricType, v))
}

// MetricTypeNEQ applies the NEQ predicate on the "metric_type" field.
func MetricTypeNEQ(v MetricType) predicate.Metric {
	return predicate.Metric(sql.FieldNEQ(FieldMetricType, v))
}

// MetricTypeIn applies the In predicate on the "metric_type" field.
func MetricTypeIn(vs ...MetricType) predicate.Metric {
	return predicate.Metric(sql.FieldIn(FieldMetricType, vs...))
}

// MetricTypeNotIn applies the NotIn predicate on the "metric_type" field.
func MetricTypeNotIn(vs ...MetricType) predicate.Metric {
	return predicate.Metric(sql.FieldNotIn(FieldMetricType, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.Metric {
	return predicate.Metric(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.Metric {
	return predicate.Metric(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.Metric {
	return predicate.Metric(sql.FieldLTE(FieldValue, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Metric {
	return predicate.Metric(sql.FieldLTE(FieldDate, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Metric {
	return predicate.Metric(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Metric {
	return predicate.Metric(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Metric) predicate.Metric {
	return predicate.Metric(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Metric) predicate.Metric {
	return predicate.Metric(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Metric) predicate.Metric {
	return predicate.Metric(sql.NotPredicates(p))
}
