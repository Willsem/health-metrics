// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Willsem/health-metrics/internal/generated/ent/metric"
	"github.com/Willsem/health-metrics/internal/generated/ent/user"
	"github.com/google/uuid"
)

// Metric is the model entity for the Metric schema.
type Metric struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MetricType holds the value of the "metric_type" field.
	MetricType metric.MetricType `json:"metric_type,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricQuery when eager-loading is set.
	Edges        MetricEdges `json:"edges"`
	user_metrics *uuid.UUID
	selectValues sql.SelectValues
}

// MetricEdges holds the relations/edges for other nodes in the graph.
type MetricEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetricEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metric) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metric.FieldValue:
			values[i] = new(sql.NullFloat64)
		case metric.FieldMetricType:
			values[i] = new(sql.NullString)
		case metric.FieldDate:
			values[i] = new(sql.NullTime)
		case metric.FieldID:
			values[i] = new(uuid.UUID)
		case metric.ForeignKeys[0]: // user_metrics
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metric fields.
func (m *Metric) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metric.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case metric.FieldMetricType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metric_type", values[i])
			} else if value.Valid {
				m.MetricType = metric.MetricType(value.String)
			}
		case metric.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				m.Value = value.Float64
			}
		case metric.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				m.Date = value.Time
			}
		case metric.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_metrics", values[i])
			} else if value.Valid {
				m.user_metrics = new(uuid.UUID)
				*m.user_metrics = *value.S.(*uuid.UUID)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Metric.
// This includes values selected through modifiers, order, etc.
func (m *Metric) GetValue(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Metric entity.
func (m *Metric) QueryOwner() *UserQuery {
	return NewMetricClient(m.config).QueryOwner(m)
}

// Update returns a builder for updating this Metric.
// Note that you need to call Metric.Unwrap() before calling this method if this Metric
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metric) Update() *MetricUpdateOne {
	return NewMetricClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metric entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metric) Unwrap() *Metric {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metric is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metric) String() string {
	var builder strings.Builder
	builder.WriteString("Metric(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("metric_type=")
	builder.WriteString(fmt.Sprintf("%v", m.MetricType))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", m.Value))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(m.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Metrics is a parsable slice of Metric.
type Metrics []*Metric
