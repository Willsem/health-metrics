// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccessesColumns holds the columns for the "accesses" table.
	AccessesColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "user_given_accesses", Type: field.TypeUUID, Nullable: true},
		{Name: "user_recieved_accesses", Type: field.TypeUUID, Nullable: true},
	}
	// AccessesTable holds the schema information for the "accesses" table.
	AccessesTable = &schema.Table{
		Name:       "accesses",
		Columns:    AccessesColumns,
		PrimaryKey: []*schema.Column{AccessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accesses_users_given_accesses",
				Columns:    []*schema.Column{AccessesColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "accesses_users_recieved_accesses",
				Columns:    []*schema.Column{AccessesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MetricsColumns holds the columns for the "metrics" table.
	MetricsColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "metric_type", Type: field.TypeEnum, Enums: []string{"calories", "fats", "carbs", "proteins", "vegetable", "steps", "weight", "neck", "breast", "left_biceps", "right_biceps", "waist", "buttocks", "left_hip", "right_hip", "left_calf", "right_calf", "fat_percentage"}},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "date", Type: field.TypeTime},
		{Name: "user_metrics", Type: field.TypeUUID, Nullable: true},
	}
	// MetricsTable holds the schema information for the "metrics" table.
	MetricsTable = &schema.Table{
		Name:       "metrics",
		Columns:    MetricsColumns,
		PrimaryKey: []*schema.Column{MetricsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "metrics_users_metrics",
				Columns:    []*schema.Column{MetricsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "metric_metric_type_user_metrics",
				Unique:  false,
				Columns: []*schema.Column{MetricsColumns[1], MetricsColumns[4]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "login", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_login",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessesTable,
		MetricsTable,
		UsersTable,
	}
)

func init() {
	AccessesTable.ForeignKeys[0].RefTable = UsersTable
	AccessesTable.ForeignKeys[1].RefTable = UsersTable
	MetricsTable.ForeignKeys[0].RefTable = UsersTable
}
