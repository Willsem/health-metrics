// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldLogin holds the string denoting the login field in the database.
	FieldLogin = "login"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// EdgeGivenAccesses holds the string denoting the given_accesses edge name in mutations.
	EdgeGivenAccesses = "given_accesses"
	// EdgeRecievedAccesses holds the string denoting the recieved_accesses edge name in mutations.
	EdgeRecievedAccesses = "recieved_accesses"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MetricsTable is the table that holds the metrics relation/edge.
	MetricsTable = "metrics"
	// MetricsInverseTable is the table name for the Metric entity.
	// It exists in this package in order to avoid circular dependency with the "metric" package.
	MetricsInverseTable = "metrics"
	// MetricsColumn is the table column denoting the metrics relation/edge.
	MetricsColumn = "user_metrics"
	// GivenAccessesTable is the table that holds the given_accesses relation/edge.
	GivenAccessesTable = "accesses"
	// GivenAccessesInverseTable is the table name for the Access entity.
	// It exists in this package in order to avoid circular dependency with the "access" package.
	GivenAccessesInverseTable = "accesses"
	// GivenAccessesColumn is the table column denoting the given_accesses relation/edge.
	GivenAccessesColumn = "user_given_accesses"
	// RecievedAccessesTable is the table that holds the recieved_accesses relation/edge.
	RecievedAccessesTable = "accesses"
	// RecievedAccessesInverseTable is the table name for the Access entity.
	// It exists in this package in order to avoid circular dependency with the "access" package.
	RecievedAccessesInverseTable = "accesses"
	// RecievedAccessesColumn is the table column denoting the recieved_accesses relation/edge.
	RecievedAccessesColumn = "user_recieved_accesses"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldLogin,
	FieldPassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByLogin orders the results by the login field.
func ByLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogin, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByMetricsCount orders the results by metrics count.
func ByMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetricsStep(), opts...)
	}
}

// ByMetrics orders the results by metrics terms.
func ByMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGivenAccessesCount orders the results by given_accesses count.
func ByGivenAccessesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGivenAccessesStep(), opts...)
	}
}

// ByGivenAccesses orders the results by given_accesses terms.
func ByGivenAccesses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGivenAccessesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecievedAccessesCount orders the results by recieved_accesses count.
func ByRecievedAccessesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecievedAccessesStep(), opts...)
	}
}

// ByRecievedAccesses orders the results by recieved_accesses terms.
func ByRecievedAccesses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecievedAccessesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetricsTable, MetricsColumn),
	)
}
func newGivenAccessesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GivenAccessesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GivenAccessesTable, GivenAccessesColumn),
	)
}
func newRecievedAccessesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecievedAccessesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecievedAccessesTable, RecievedAccessesColumn),
	)
}
